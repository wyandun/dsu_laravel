# GitLab CI/CD Configuration for Laravel - Production Ready
# Diseñado para entornos corporativos con certificados SSL problemáticos

variables:
  # Desactivar verificación SSL para evitar problemas con certificados corporativos
  GIT_SSL_NO_VERIFY: "true"
  COMPOSER_ALLOW_SUPERUSER: 1
  COMPOSER_NO_INTERACTION: 1
  COMPOSER_CACHE_DIR: /tmp/composer-cache
  npm_config_cache: /tmp/npm-cache
  # Desactivar verificaciones SSL para todas las herramientas
  CURL_CA_BUNDLE: ""
  SSL_VERIFY: "false"

# Cache para mejorar velocidad
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - /tmp/composer-cache/
    - /tmp/npm-cache/
    - vendor/
    - node_modules/

# Stages del pipeline
stages:
  - prepare
  - build
  - test

# Job de preparación - Instala dependencias
prepare:
  stage: prepare
  image: php:8.3-cli
  before_script:
    # Instalar dependencias del sistema sin verificación SSL
    - apt-get update -yqq
    - apt-get install -yqq git curl zip unzip nodejs npm sqlite3 libzip-dev
    - docker-php-ext-install zip pdo_sqlite
    
    # Instalar Composer manualmente sin SSL
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" 2>/dev/null || curl -k -sS https://getcomposer.org/installer -o composer-setup.php
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer --disable-tls
    - rm composer-setup.php
    
    # Verificar instalación
    - composer --version
    - node --version
    - npm --version
  script:
    # Crear directorio de cache si no existe
    - mkdir -p /tmp/composer-cache /tmp/npm-cache
    
    # Configurar Composer para no usar SSL
    - composer config --global secure-http false
    - composer config --global disable-tls true
    
    # Instalar dependencias PHP sin SSL
    - composer install --no-dev --optimize-autoloader --no-scripts --prefer-dist
    
    # Configurar npm para no usar SSL
    - npm config set strict-ssl false
    - npm config set registry http://registry.npmjs.org/
    
    # Instalar dependencias Node.js
    - npm ci --cache /tmp/npm-cache
    
    # Crear archivo .env
    - cp .env.example .env
    - php artisan key:generate --ansi
    
    # Crear base de datos SQLite
    - touch database/database.sqlite
    
    # Ejecutar migraciones
    - php artisan migrate --force --no-interaction
    
    # Compilar assets
    - npm run build
    
  artifacts:
    name: "prepared-app-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 hour
    paths:
      - vendor/
      - node_modules/
      - public/build/
      - .env
      - database/database.sqlite
      - bootstrap/cache/
    reports:
      dotenv: .env

# Job de construcción - Prepara la aplicación
build:
  stage: build
  image: php:8.3-cli
  dependencies:
    - prepare
  before_script:
    # Instalar extensiones PHP necesarias
    - apt-get update -yqq
    - apt-get install -yqq libzip-dev sqlite3
    - docker-php-ext-install zip pdo_sqlite
    
    # Instalar Composer
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" 2>/dev/null || curl -k -sS https://getcomposer.org/installer -o composer-setup.php
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer --disable-tls
    - rm composer-setup.php
  script:
    # Verificar que los artefactos estén presentes
    - ls -la vendor/ || echo "vendor/ directory missing"
    - ls -la node_modules/ || echo "node_modules/ directory missing"
    - ls -la public/build/ || echo "public/build/ directory missing"
    - ls -la .env || echo ".env file missing"
    
    # Optimizar la aplicación para producción
    - php artisan config:cache --no-interaction
    - php artisan route:cache --no-interaction
    - php artisan view:cache --no-interaction
    
    # Verificar configuración
    - php artisan about
    
  artifacts:
    name: "built-app-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 hour
    paths:
      - vendor/
      - node_modules/
      - public/build/
      - .env
      - database/database.sqlite
      - bootstrap/cache/
    reports:
      dotenv: .env

# Job de testing - Ejecuta las pruebas
test:
  stage: test
  image: php:8.3-cli
  dependencies:
    - build
  before_script:
    # Instalar extensiones PHP necesarias
    - apt-get update -yqq
    - apt-get install -yqq libzip-dev sqlite3
    - docker-php-ext-install zip pdo_sqlite
    
    # Instalar Composer
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" 2>/dev/null || curl -k -sS https://getcomposer.org/installer -o composer-setup.php
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer --disable-tls
    - rm composer-setup.php
    
    # Configurar Composer sin SSL
    - composer config --global secure-http false
    - composer config --global disable-tls true
    
    # Instalar dependencias de desarrollo
    - composer install --dev --optimize-autoloader --no-scripts --prefer-dist
  script:
    # Verificar que todo esté en su lugar
    - ls -la vendor/bin/phpunit || echo "PHPUnit not found"
    - ls -la .env || echo ".env file missing"
    
    # Limpiar cache antes de testing
    - php artisan config:clear --no-interaction
    - php artisan cache:clear --no-interaction
    
    # Crear base de datos de testing si no existe
    - touch database/testing.sqlite
    
    # Ejecutar tests
    - php artisan test --env=testing --parallel
    
  artifacts:
    name: "test-results-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 week
    when: always
    paths:
      - storage/logs/
    reports:
      junit: storage/logs/junit.xml
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'

# Job de limpieza (opcional)
cleanup:
  stage: .post
  image: alpine:latest
  script:
    - echo "Pipeline completed successfully"
    - echo "Artifacts will be automatically cleaned up based on retention policy"
  when: always
